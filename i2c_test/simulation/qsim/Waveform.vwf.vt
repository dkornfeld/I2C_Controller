// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "06/04/2018 17:47:08"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    i2c_test
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module i2c_test_vlg_sample_tst(
	clk,
	rst,
	scl,
	sda,
	start_button,
	sampler_tx
);
input  clk;
input  rst;
input  scl;
input  sda;
input  start_button;
output sampler_tx;

reg sample;
time current_time;
always @(clk or rst or scl or sda or start_button)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module i2c_test_vlg_check_tst (
	scl,
	sda,
	sampler_rx
);
input  scl;
input  sda;
input sampler_rx;

reg  scl_expected;
reg  sda_expected;

reg  scl_prev;
reg  sda_prev;

reg  scl_expected_prev;
reg  sda_expected_prev;

reg  last_scl_exp;
reg  last_sda_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:2] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 2'b1;
end

// update real /o prevs

always @(trigger)
begin
	scl_prev = scl;
	sda_prev = sda;
end

// update expected /o prevs

always @(trigger)
begin
	scl_expected_prev = scl_expected;
	sda_expected_prev = sda_expected;
end


// generate trigger
always @(scl_expected or scl or sda_expected or sda)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected scl = %b | expected sda = %b | ",scl_expected_prev,sda_expected_prev);
	$display("| real scl = %b | real sda = %b | ",scl_prev,sda_prev);
`endif
	if (
		( scl_expected_prev !== 1'bx ) && ( scl_prev !== scl_expected_prev )
		&& ((scl_expected_prev !== last_scl_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port scl :: @time = %t",  $realtime);
		$display ("     Expected value = %b", scl_expected_prev);
		$display ("     Real value = %b", scl_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_scl_exp = scl_expected_prev;
	end
	if (
		( sda_expected_prev !== 1'bx ) && ( sda_prev !== sda_expected_prev )
		&& ((sda_expected_prev !== last_sda_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sda :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sda_expected_prev);
		$display ("     Real value = %b", sda_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_sda_exp = sda_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#10000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module i2c_test_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg rst;
reg treg_scl;
reg treg_sda;
reg start_button;
// wires                                               
wire scl;
wire sda;

wire sampler;                             

// assign statements (if any)                          
assign scl = treg_scl;
assign sda = treg_sda;
i2c_test i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.rst(rst),
	.scl(scl),
	.sda(sda),
	.start_button(start_button)
);

// clk
always
begin
	clk = 1'b0;
	clk = #500 1'b1;
	#500;
end 

// rst
initial
begin
	rst = 1'b1;
end 

// scl
initial
begin
	treg_scl = 1'bZ;
end 

// sda
initial
begin
	treg_sda = 1'bZ;
end 

// start_button
initial
begin
	start_button = 1'b1;
	start_button = #4640000 1'b0;
	start_button = #80000 1'b1;
end 

i2c_test_vlg_sample_tst tb_sample (
	.clk(clk),
	.rst(rst),
	.scl(scl),
	.sda(sda),
	.start_button(start_button),
	.sampler_tx(sampler)
);

i2c_test_vlg_check_tst tb_out(
	.scl(scl),
	.sda(sda),
	.sampler_rx(sampler)
);
endmodule

